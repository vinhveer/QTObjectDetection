name: Build Object Detection App
on:
  push:
    tags:
      - 'v*'  # Chạy khi có tag mới (ví dụ: v1.0.0)
jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60  # Tăng thời gian chờ tối đa
    strategy:
      fail-fast: false  # Tiếp tục xây dựng các OS khác ngay cả khi một OS thất bại
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            exe_ext: .exe
          - os: ubuntu-latest
            exe_ext: ''
          - os: macos-latest
            exe_ext: ''
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller==5.13.2  # Chỉ định phiên bản ổn định
    # Debug dependencies
    - name: List installed packages
      run: pip list
    # Debug file structure
    - name: List project structure
      shell: bash
      run: |
        find . -type f | grep -v "__pycache__" | sort
    - name: Build App for Windows
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --name MyApp --windowed --add-data "*.py;." main.py
      
    - name: Build App for MacOS
      if: matrix.os == 'macos-latest'
      run: |
        pyinstaller --name MyApp --windowed --add-data "*.py:." main.py
    - name: Build App for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller --name MyApp --add-data "*.py:." main.py
    - name: Get Version
      id: get_version
      shell: bash
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "VERSION=dev-build" >> $GITHUB_ENV
        fi
    - name: List dist directory
      shell: bash
      run: |
        ls -la dist/
    - name: Create ZIP (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd dist
        powershell Compress-Archive -Path MyApp -DestinationPath ../MyApp-${{ env.VERSION }}-${{ runner.os }}.zip -Force
    - name: Create ZIP (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd dist
        zip -r ../MyApp-${{ env.VERSION }}-${{ runner.os }}.zip MyApp
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: MyApp-${{ env.VERSION }}-${{ runner.os }}
        path: MyApp-${{ env.VERSION }}-${{ runner.os }}.zip
        retention-days: 5
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    - name: Display structure of downloaded files
      run: ls -R
      working-directory: artifacts/
    - name: Publish Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: artifacts/**/*.zip
        generate_release_notes: true