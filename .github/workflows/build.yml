name: Build Object Detection App
on:
  push:
    tags:
      - 'v*'  # Chạy khi có tag mới
jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller==5.13.2
    
    - name: Get Version
      id: get_version
      shell: bash
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "VERSION=dev-build" >> $GITHUB_ENV
        fi
    
    # Windows-specific steps
    - name: Install Visual C++ Redistributable
      if: matrix.os == 'windows-latest'
      run: |
        choco install vcredist140 -y
    
    - name: Build Windows App with PyInstaller
      if: matrix.os == 'windows-latest'
      run: |
        # Create spec file for more control
        pyi-makespec --onedir --noconsole --name ObjectDetectionWithYOLO main.py
        
        # Edit the spec file to add missing DLLs
        $content = Get-Content -Path ObjectDetectionWithYOLO.spec
        $newContent = @()
        foreach ($line in $content) {
          $newContent += $line
          if ($line -match "^a = Analysis") {
            $newContent += "import os"
            $newContent += "from PyInstaller.utils.hooks import collect_dynamic_libs"
            $newContent += "binaries = []"
            $newContent += "# Add Windows SDK DLLs"
            $newContent += "win_sdk_path = os.path.join(os.environ['SystemRoot'], 'System32')"
            $newContent += "sdk_dlls = ['api-ms-win-shcore-scaling-l1-1-1.dll']"
            $newContent += "for dll in sdk_dlls:"
            $newContent += "    dll_path = os.path.join(win_sdk_path, dll)"
            $newContent += "    if os.path.exists(dll_path):"
            $newContent += "        binaries.append((dll_path, '.'))"
          }
          if ($line -match "^\s+binaries=\[\],") {
            $newContent[-1] = "          binaries=binaries,"
          }
        }
        Set-Content -Path ObjectDetectionWithYOLO.spec -Value $newContent
        
        # Build with the modified spec file
        pyinstaller --clean ObjectDetectionWithYOLO.spec
    
    - name: Create simple app icon
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Install Python Pillow library
        pip install pillow
        
        # Create a simple icon using Python and Pillow
        python -c "
        from PIL import Image, ImageDraw
        import os
        
        # Create a simple colored square image
        img = Image.new('RGB', (256, 256), color=(0, 120, 212))
        draw = ImageDraw.Draw(img)
        
        # Draw a simple 'Y' text to represent YOLO
        draw.rectangle((20, 20, 236, 236), outline=(255, 255, 255), width=8)
        draw.line((128, 50, 128, 128), fill=(255, 255, 255), width=16)
        draw.line((128, 128, 80, 200), fill=(255, 255, 255), width=16)
        draw.line((128, 128, 176, 200), fill=(255, 255, 255), width=16)
        
        # Save as ICO
        img.save('app_icon.ico')
        "
    
    - name: Create Inno Setup Script
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        @"
        [Setup]
        AppName=Object Detection With YOLO
        AppVersion=${{ env.VERSION }}
        DefaultDirName={autopf}\Object Detection With YOLO
        DefaultGroupName=Object Detection With YOLO
        OutputDir=output
        OutputBaseFilename=ObjectDetectionWithYOLO_${{ env.VERSION }}_Setup
        Compression=lzma
        SolidCompression=yes
        WizardStyle=modern
        SetupIconFile=app_icon.ico
        UninstallDisplayIcon={app}\ObjectDetectionWithYOLO.exe
        
        [Files]
        Source: "dist\ObjectDetectionWithYOLO\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
        Source: "app_icon.ico"; DestDir: "{app}"; Flags: ignoreversion
        
        [Icons]
        Name: "{group}\Object Detection With YOLO"; Filename: "{app}\ObjectDetectionWithYOLO.exe"; IconFilename: "{app}\app_icon.ico"
        Name: "{commondesktop}\Object Detection With YOLO"; Filename: "{app}\ObjectDetectionWithYOLO.exe"; IconFilename: "{app}\app_icon.ico"
        Name: "{autoprograms}\Object Detection With YOLO"; Filename: "{app}\ObjectDetectionWithYOLO.exe"; IconFilename: "{app}\app_icon.ico"
        
        [Run]
        Filename: "{app}\ObjectDetectionWithYOLO.exe"; Description: "Chạy Object Detection With YOLO"; Flags: nowait postinstall skipifsilent
        "@ | Out-File -FilePath setup.iss -Encoding utf8
    
    - name: Install Inno Setup
      if: matrix.os == 'windows-latest'
      run: |
        choco install innosetup -y
    
    - name: Compile Inno Setup Installer
      if: matrix.os == 'windows-latest'
      run: |
        & "C:\Program Files (x86)\Inno Setup 6\iscc.exe" setup.iss
    
    # macOS-specific steps
    - name: Build macOS App with PyInstaller
      if: matrix.os == 'macos-latest'
      run: |
        pyinstaller --windowed --noconsole --name ObjectDetectionWithYOLO main.py
    
    - name: Install create-dmg
      if: matrix.os == 'macos-latest'
      run: |
        brew install create-dmg
    
    - name: Create macOS DMG Package
      if: matrix.os == 'macos-latest'
      run: |
        # Create an application bundle structure
        mkdir -p dmg_build
        cp -r "dist/ObjectDetectionWithYOLO.app" dmg_build/
        
        # Create the DMG file
        create-dmg \
          --volname "Object Detection With YOLO ${{ env.VERSION }}" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "ObjectDetectionWithYOLO.app" 200 190 \
          --hide-extension "ObjectDetectionWithYOLO.app" \
          --app-drop-link 600 185 \
          "ObjectDetectionWithYOLO-${{ env.VERSION }}-macOS.dmg" \
          "dmg_build/" || true
        
        # Verify the DMG was created
        ls -la "ObjectDetectionWithYOLO-${{ env.VERSION }}-macOS.dmg" || echo "DMG creation failed"
    
    - name: Upload Windows Installer
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ObjectDetectionWithYOLO-${{ env.VERSION }}-Windows-Installer
        path: output/ObjectDetectionWithYOLO_${{ env.VERSION }}_Setup.exe
        retention-days: 5
    
    - name: Upload macOS Installer
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ObjectDetectionWithYOLO-${{ env.VERSION }}-macOS-Installer
        path: ObjectDetectionWithYOLO-${{ env.VERSION }}-macOS.dmg
        retention-days: 5
  
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Display structure of downloaded files
      run: ls -R
      working-directory: artifacts/
    
    - name: Publish Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: artifacts/**/*
        generate_release_notes: true