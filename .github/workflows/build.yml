name: Build Object Detection App with Installer
on:
  push:
    tags:
      - 'v*'  # Chạy khi có tag mới (ví dụ: v1.0.0)
  workflow_dispatch:  # Cho phép kích hoạt thủ công
jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            exe_ext: .exe
          - os: ubuntu-latest
            exe_ext: ''
          - os: macos-latest
            exe_ext: ''
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
    
    - name: Get Version
      id: get_version
      shell: bash
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        elif [[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]]; then
          echo "VERSION=manual-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
        else
          echo "VERSION=dev-build" >> $GITHUB_ENV
        fi
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build App for Windows
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --name MyApp --windowed --add-data "*.py;." --add-data "controller;controller" --add-data "module;module" --add-data "views;views" --add-data "ui;ui" --add-data "configuration;configuration" --icon "icon.ico" main.py
        
        # Tạo tệp cấu hình NSIS
        @"
        !include "MUI2.nsh"
        !define APP_NAME "Object Detection App"
        !define VERSION "$env:VERSION"
        !define INSTALLER_NAME "MyApp-$env:VERSION-Setup.exe"
        !define MAIN_APP_EXE "MyApp.exe"
        !define MUI_ICON "icon.ico"
        !define MUI_UNICON "icon.ico"

        !insertmacro MUI_PAGE_WELCOME
        !insertmacro MUI_PAGE_DIRECTORY
        !insertmacro MUI_PAGE_INSTFILES
        !insertmacro MUI_PAGE_FINISH
        !insertmacro MUI_UNPAGE_CONFIRM
        !insertmacro MUI_UNPAGE_INSTFILES
        !insertmacro MUI_LANGUAGE "English"

        Name "${APP_NAME}"
        OutFile "${INSTALLER_NAME}"
        InstallDir "$PROGRAMFILES\${APP_NAME}"
        ShowInstDetails show

        Section -MainProgram
          SetOutPath "$INSTDIR"
          File /r "dist\MyApp\*.*"
          CreateShortCut "$SMPROGRAMS\${APP_NAME}\${APP_NAME}.lnk" "$INSTDIR\${MAIN_APP_EXE}"
          CreateShortCut "$DESKTOP\${APP_NAME}.lnk" "$INSTDIR\${MAIN_APP_EXE}"
        SectionEnd

        Section Uninstall
          RMDir /r "$INSTDIR"
          Delete "$SMPROGRAMS\${APP_NAME}\${APP_NAME}.lnk"
          Delete "$DESKTOP\${APP_NAME}.lnk"
        SectionEnd
        "@ | Out-File -FilePath installer.nsi -Encoding utf8
        
        # Cài đặt NSIS
        choco install nsis -y
        & "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi
    
    - name: Build App for macOS
      if: matrix.os == 'macos-latest'
      run: |
        pyinstaller --name MyApp --windowed --add-data "*.py:." --add-data "controller:controller" --add-data "module:module" --add-data "views:views" --add-data "ui:ui" --add-data "configuration:configuration" --icon "icon.icns" main.py
        
        brew install create-dmg
        create-dmg \
          --volname "MyApp Installer" \
          --volicon "icon.icns" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "MyApp.app" 200 190 \
          --hide-extension "MyApp.app" \
          --app-drop-link 600 185 \
          "MyApp-${{ env.VERSION }}-Installer.dmg" \
          "dist/MyApp.app"
    
    - name: Build App for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller --name MyApp --add-data "*.py:." --add-data "controller:controller" --add-data "module:module" --add-data "views:views" --add-data "ui:ui" --add-data "configuration:configuration" main.py
        
        mkdir -p deb_dist/usr/local/bin/MyApp
        mkdir -p deb_dist/usr/share/applications
        cp -r dist/MyApp/* deb_dist/usr/local/bin/MyApp/
        
        cat > deb_dist/DEBIAN/control << EOF
        Package: myapp
        Version: ${{ env.VERSION }}
        Architecture: amd64
        Maintainer: Your Name <your.email@example.com>
        Description: Object Detection Application
        EOF
        
        cat > deb_dist/usr/share/applications/myapp.desktop << EOF
        [Desktop Entry]
        Name=MyApp
        Exec=/usr/local/bin/MyApp/MyApp
        Type=Application
        EOF
        
        dpkg-deb --build deb_dist MyApp-${{ env.VERSION }}-Installer.deb
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MyApp-${{ env.VERSION }}-${{ matrix.os }}-Installer
        path: |
          MyApp-${{ env.VERSION }}-Setup.exe
          MyApp-${{ env.VERSION }}-Installer.dmg
          MyApp-${{ env.VERSION }}-Installer.deb
        retention-days: 5

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Publish Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: artifacts/**/*.{exe,dmg,deb}
        generate_release_notes: true