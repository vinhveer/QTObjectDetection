name: Build Object Detection App with Installer

on:
  push:
    tags:
      - 'v*'  # Chạy khi đẩy tag mới (ví dụ: v1.1)
  workflow_dispatch:  # Cho phép chạy thủ công

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: windows-latest
            exe_ext: .exe
          - os: macos-latest
            exe_ext: ''
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      raw_version: ${{ steps.get_version.outputs.raw_version }}
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
    
    - name: Get Version
      id: get_version
      shell: bash
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          echo "raw_version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          CLEAN_VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
        elif [[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]]; then
          echo "raw_version=manual-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          echo "version=0.0.1.$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
        else
          echo "raw_version=dev-build" >> $GITHUB_OUTPUT
          echo "version=0.0.1.$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; else echo "requirements.txt not found"; fi
        pip install pyinstaller
    
    - name: Generate Default Icons
      shell: bash
      run: |
        mkdir -p resources
        
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew install imagemagick || true
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          choco install imagemagick -y || true
        fi
        
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          convert -size 256x256 xc:black -fill white -gravity center -pointsize 20 -annotate 0 "ObjectDetection" resources/icon.ico || echo "Could not create icon.ico"
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          mkdir -p MyIcon.iconset
          for size in 16 32 64 128 256 512; do
            convert -size ${size}x${size} xc:black -fill white -gravity center -pointsize $((size/10)) -annotate 0 "OD" MyIcon.iconset/icon_${size}x${size}.png || true
            convert -size $((size*2))x$((size*2)) xc:black -fill white -gravity center -pointsize $((size/5)) -annotate 0 "OD" MyIcon.iconset/icon_${size}x${size}@2x.png || true
          done
          iconutil -c icns MyIcon.iconset -o resources/icon.icns || echo "Could not create icon.icns"
        fi
      continue-on-error: true
    
    - name: Install Windows Code Signing Certificate
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        $cert = New-SelfSignedCertificate -Subject "CN=Nguyen Quang Vinh, O=ObjectDetection" -Type CodeSigningCert -CertStoreLocation "Cert:\CurrentUser\My"
        $certPassword = ConvertTo-SecureString -String "password" -Force -AsPlainText
        $certPath = "codesign.pfx"
        Export-PfxCertificate -Cert "Cert:\CurrentUser\My\$($cert.Thumbprint)" -FilePath $certPath -Password $certPassword
        echo "CERT_PATH=$certPath" >> $env:GITHUB_ENV
        echo "CERT_PASSWORD=password" >> $env:GITHUB_ENV
    
    - name: Build App for Windows
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        pyinstaller --name ObjectDetection --windowed --icon=resources/icon.ico --add-data "*.py;." --add-data "controller;controller" --add-data "module;module" --add-data "views;views" --add-data "ui;ui" --add-data "configuration;configuration" main.py || exit 1
        
        powershell -Command "\$certPassword = ConvertTo-SecureString -String \$env:CERT_PASSWORD -Force -AsPlainText; \$cert = Import-PfxCertificate -FilePath \$env:CERT_PATH -CertStoreLocation Cert:\CurrentUser\My -Password \$certPassword; Set-AuthenticodeSignature -FilePath 'dist\ObjectDetection\ObjectDetection.exe' -Certificate \$cert -TimestampServer 'http://timestamp.digicert.com'"
        
        cat << EOF > installer.nsi
        !include "MUI2.nsh"
        !define APP_NAME "ObjectDetection"
        !define AUTHOR "Nguyen Quang Vinh"
        !define VERSION "${{ steps.get_version.outputs.version }}"
        !define INSTALLER_NAME "ObjectDetection-${{ steps.get_version.outputs.raw_version }}-Setup.exe"
        !define MAIN_APP_EXE "ObjectDetection.exe"
        
        !insertmacro MUI_PAGE_WELCOME
        !insertmacro MUI_PAGE_DIRECTORY
        !insertmacro MUI_PAGE_INSTFILES
        !insertmacro MUI_PAGE_FINISH
        !insertmacro MUI_UNPAGE_CONFIRM
        !insertmacro MUI_UNPAGE_INSTFILES
        !insertmacro MUI_LANGUAGE "English"
    
        Name "\${APP_NAME}"
        OutFile "\${INSTALLER_NAME}"
        InstallDir "\$PROGRAMFILES\\\${APP_NAME}"
        ShowInstDetails show
        
        VIProductVersion "\${VERSION}.0.0"
        VIAddVersionKey "ProductName" "\${APP_NAME}"
        VIAddVersionKey "CompanyName" "\${AUTHOR}"
        VIAddVersionKey "FileVersion" "\${VERSION}"
        VIAddVersionKey "ProductVersion" "\${VERSION}"
        VIAddVersionKey "FileDescription" "Object Detection Application"
        VIAddVersionKey "LegalCopyright" "© 2025 \${AUTHOR}"
    
        Section -MainProgram
          SetOutPath "\$INSTDIR"
          File /r "dist\\ObjectDetection\\*.*"
          
          CreateDirectory "\$SMPROGRAMS\\\${APP_NAME}"
          CreateShortCut "\$SMPROGRAMS\\\${APP_NAME}\\\${APP_NAME}.lnk" "\$INSTDIR\\\${MAIN_APP_EXE}"
          CreateShortCut "\$DESKTOP\\\${APP_NAME}.lnk" "\$INSTDIR\\\${MAIN_APP_EXE}"
          
          WriteUninstaller "\$INSTDIR\\uninstall.exe"
          WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\\${APP_NAME}" "DisplayName" "\${APP_NAME}"
          WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\\${APP_NAME}" "UninstallString" "\$INSTDIR\\uninstall.exe"
        SectionEnd
    
        Section "Uninstall"
          Delete "\$INSTDIR\\uninstall.exe"
          RMDir /r "\$INSTDIR"
          Delete "\$SMPROGRAMS\\\${APP_NAME}\\\${APP_NAME}.lnk"
          RMDir "\$SMPROGRAMS\\\${APP_NAME}"
          Delete "\$DESKTOP\\\${APP_NAME}.lnk"
          DeleteRegKey HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\\${APP_NAME}"
        SectionEnd
        EOF
        
        choco install nsis -y --force || exit 1
        "/c/Program Files (x86)/NSIS/makensis.exe" installer.nsi || exit 1
        
        powershell -Command "\$certPassword = ConvertTo-SecureString -String \$env:CERT_PASSWORD -Force -AsPlainText; \$cert = Import-PfxCertificate -FilePath \$env:CERT_PATH -CertStoreLocation Cert:\CurrentUser\My -Password \$certPassword; Set-AuthenticodeSignature -FilePath 'ObjectDetection-${{ steps.get_version.outputs.raw_version }}-Setup.exe' -Certificate \$cert -TimestampServer 'http://timestamp.digicert.com'"
    
    - name: Build App for macOS
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        pyinstaller --name ObjectDetection --windowed --icon=resources/icon.icns --add-data "*.py:." --add-data "controller:controller" --add-data "module:module" --add-data "views:views" --add-data "ui:ui" --add-data "configuration:configuration" main.py || exit 1
        
        PLIST_PATH="dist/ObjectDetection.app/Contents/Info.plist"
        /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string ${{ steps.get_version.outputs.version }}" "$PLIST_PATH" || true
        /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ steps.get_version.outputs.version }}" "$PLIST_PATH" || true
        /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string ${{ steps.get_version.outputs.version }}" "$PLIST_PATH" || true
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ steps.get_version.outputs.version }}" "$PLIST_PATH" || true
        /usr/libexec/PlistBuddy -c "Add :NSHumanReadableCopyright string © 2025 Nguyen Quang Vinh" "$PLIST_PATH" || true
        /usr/libexec/PlistBuddy -c "Set :NSHumanReadableCopyright © 2025 Nguyen Quang Vinh" "$PLIST_PATH" || true
        
        brew install create-dmg || brew upgrade create-dmg || echo "create-dmg installation failed"
        create-dmg \
          --volname "ObjectDetection Installer" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "ObjectDetection.app" 200 190 \
          --hide-extension "ObjectDetection.app" \
          --app-drop-link 600 185 \
          "ObjectDetection-${{ steps.get_version.outputs.raw_version }}-Installer.dmg" \
          "dist/ObjectDetection.app" || {
            echo "DMG creation failed, creating ZIP instead"
            ditto -c -k --keepParent "dist/ObjectDetection.app" "ObjectDetection-${{ steps.get_version.outputs.raw_version }}-Installer.zip"
          }
    
    - name: Upload Windows Installer
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: ObjectDetection-*-Setup.exe
        
    - name: Upload macOS Installer
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-installer
        path: |
          ObjectDetection-*-Installer.dmg
          ObjectDetection-*-Installer.zip

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download Windows Installer
      uses: actions/download-artifact@v4
      with:
        name: windows-installer
        path: artifacts/windows
        
    - name: Download macOS Installer
      uses: actions/download-artifact@v4
      with:
        name: macos-installer
        path: artifacts/macos
    
    - name: List artifacts
      run: |
        ls -R artifacts/
    
    - name: Publish Release
      uses: softprops/action-gh-release@v1
      with:
        name: "ObjectDetection ${{ needs.build.outputs.raw_version }} by Nguyen Quang Vinh"
        files: |
          artifacts/windows/*
          artifacts/macos/*
        generate_release_notes: true