name: Build Object Detection App with Installer
on:
  push:
    tags:
      - 'v*'  # Run when a new tag is pushed (e.g., v1.0.0)
  workflow_dispatch:  # Allow manual triggering
jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            exe_ext: .exe
          - os: ubuntu-latest
            exe_ext: ''
          - os: macos-latest
            exe_ext: ''
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
    
    - name: Get Version
      id: get_version
      shell: bash
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          # Store raw version with v prefix
          echo "RAW_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          # Store cleaned version without v prefix for debian packages
          CLEAN_VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=${CLEAN_VERSION}" >> $GITHUB_ENV
        elif [[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]]; then
          echo "RAW_VERSION=manual-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
          echo "VERSION=0.0.1.$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
        else
          echo "RAW_VERSION=dev-build" >> $GITHUB_ENV
          echo "VERSION=0.0.1.$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
        fi
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Generate Default Icons
      shell: bash
      run: |
        # Create resources directory
        mkdir -p resources
        
        # Install ImageMagick based on OS
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get update && sudo apt-get install -y imagemagick || true
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew install imagemagick || true
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          choco install imagemagick || true
        fi
        
        # Create simple icons (platform specific)
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          convert -size 256x256 xc:black -fill white -gravity center -pointsize 20 -annotate 0 "ObjectDetection" resources/icon.ico || echo "Could not create icon.ico"
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          # For macOS - Create a simple icns
          mkdir -p MyIcon.iconset
          for size in 16 32 64 128 256 512; do
            convert -size ${size}x${size} xc:black -fill white -gravity center -pointsize $((size/10)) -annotate 0 "OD" MyIcon.iconset/icon_${size}x${size}.png || true
            convert -size $((size*2))x$((size*2)) xc:black -fill white -gravity center -pointsize $((size/5)) -annotate 0 "OD" MyIcon.iconset/icon_${size}x${size}@2x.png || true
          done
          iconutil -c icns MyIcon.iconset -o resources/icon.icns || echo "Could not create icon.icns"
        elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          convert -size 256x256 xc:black -fill white -gravity center -pointsize 20 -annotate 0 "ObjectDetection" resources/icon.png || echo "Could not create icon.png"
        fi
      continue-on-error: true
    
    - name: Build App for Windows
      if: matrix.os == 'windows-latest'
      run: |
        # Build with basic configuration
        pyinstaller --name ObjectDetection --windowed --add-data "*.py;." --add-data "controller;controller" --add-data "module;module" --add-data "views;views" --add-data "ui;ui" --add-data "configuration;configuration" main.py
        
        # Create NSIS config file
        @"
        !include "MUI2.nsh"
        !define APP_NAME "ObjectDetection"
        !define VERSION "$env:RAW_VERSION"
        !define INSTALLER_NAME "ObjectDetection-$env:RAW_VERSION-Setup.exe"
        !define MAIN_APP_EXE "ObjectDetection.exe"
        
        !insertmacro MUI_PAGE_WELCOME
        !insertmacro MUI_PAGE_DIRECTORY
        !insertmacro MUI_PAGE_INSTFILES
        !insertmacro MUI_PAGE_FINISH
        !insertmacro MUI_UNPAGE_CONFIRM
        !insertmacro MUI_UNPAGE_INSTFILES
        !insertmacro MUI_LANGUAGE "English"

        Name "${APP_NAME}"
        OutFile "${INSTALLER_NAME}"
        InstallDir "$PROGRAMFILES\${APP_NAME}"
        ShowInstDetails show

        Section -MainProgram
          SetOutPath "$INSTDIR"
          File /r "dist\ObjectDetection\*.*"
          
          # Use absolute paths for directories
          CreateDirectory "$SMPROGRAMS\${APP_NAME}"
          CreateShortCut "$SMPROGRAMS\${APP_NAME}\${APP_NAME}.lnk" "$INSTDIR\${MAIN_APP_EXE}"
          CreateShortCut "$DESKTOP\${APP_NAME}.lnk" "$INSTDIR\${MAIN_APP_EXE}"
          
          # Create uninstaller
          WriteUninstaller "$INSTDIR\uninstall.exe"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APP_NAME}" "DisplayName" "${APP_NAME}"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APP_NAME}" "UninstallString" "$INSTDIR\uninstall.exe"
        SectionEnd

        Section "Uninstall"
          Delete "$INSTDIR\uninstall.exe"
          RMDir /r "$INSTDIR"
          Delete "$SMPROGRAMS\${APP_NAME}\${APP_NAME}.lnk"
          RMDir "$SMPROGRAMS\${APP_NAME}"
          Delete "$DESKTOP\${APP_NAME}.lnk"
          DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APP_NAME}"
        SectionEnd
        "@ | Out-File -FilePath installer.nsi -Encoding utf8
        
        # Install NSIS
        choco install nsis -y --force
        & "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi
    
    - name: Build App for macOS
      if: matrix.os == 'macos-latest'
      run: |
        # Build with basic configuration
        pyinstaller --name ObjectDetection --windowed --add-data "*.py:." --add-data "controller:controller" --add-data "module:module" --add-data "views:views" --add-data "ui:ui" --add-data "configuration:configuration" main.py
        
        # Create DMG installer
        brew install create-dmg || brew upgrade create-dmg || echo "create-dmg installation failed, trying to continue"
        
        create-dmg \
          --volname "ObjectDetection Installer" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "ObjectDetection.app" 200 190 \
          --hide-extension "ObjectDetection.app" \
          --app-drop-link 600 185 \
          "ObjectDetection-${{ env.RAW_VERSION }}-Installer.dmg" \
          "dist/ObjectDetection.app" || {
            echo "DMG creation failed, creating ZIP instead"
            ditto -c -k --keepParent "dist/ObjectDetection.app" "ObjectDetection-${{ env.RAW_VERSION }}-Installer.zip"
          }
    
    - name: Build App for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Build with basic configuration
        pyinstaller --name ObjectDetection --add-data "*.py:." --add-data "controller:controller" --add-data "module:module" --add-data "views:views" --add-data "ui:ui" --add-data "configuration:configuration" main.py
        
        # Create DEB package
        mkdir -p deb_dist/DEBIAN
        mkdir -p deb_dist/usr/local/bin/ObjectDetection
        mkdir -p deb_dist/usr/share/applications
        
        cp -r dist/ObjectDetection/* deb_dist/usr/local/bin/ObjectDetection/
        
        # Version must start with a digit for Debian packages
        cat > deb_dist/DEBIAN/control << EOF
        Package: objectdetection
        Version: ${{ env.VERSION }}
        Section: utils
        Priority: optional
        Architecture: amd64
        Maintainer: Nguyen Quang Vinh <contact.nguyenquangvinh@gmail.com>
        Description: Object Detection Application
         A cross-platform application for object detection.
        EOF
        
        cat > deb_dist/usr/share/applications/objectdetection.desktop << EOF
        [Desktop Entry]
        Name=ObjectDetection
        Comment=Object Detection Application
        Exec=/usr/local/bin/ObjectDetection/ObjectDetection
        Type=Application
        Categories=Graphics;Science;
        EOF
        
        # Make the app executable
        chmod +x deb_dist/usr/local/bin/ObjectDetection/ObjectDetection
        
        # Build the DEB package
        dpkg-deb --build deb_dist ObjectDetection-${{ env.RAW_VERSION }}-Installer.deb
        
        # Create tarball as additional option
        tar -czvf ObjectDetection-${{ env.RAW_VERSION }}-Linux.tar.gz -C dist ObjectDetection
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ObjectDetection-${{ env.RAW_VERSION }}-${{ matrix.os }}-Installer
        path: |
          ObjectDetection-${{ env.RAW_VERSION }}-Setup.exe
          ObjectDetection-${{ env.RAW_VERSION }}-Installer.dmg
          ObjectDetection-${{ env.RAW_VERSION }}-Installer.zip
          ObjectDetection-${{ env.RAW_VERSION }}-Installer.deb
          ObjectDetection-${{ env.RAW_VERSION }}-Linux.tar.gz
        retention-days: 5
      continue-on-error: true

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Publish Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: artifacts/**/*.{exe,dmg,zip,deb,tar.gz}
        generate_release_notes: true